void setup(){
  size(1000,1000);
}

Ball ball = new Ball(500,500,50,10);

void draw(){
  background(54, 50, 50);

  ball.changePos();

  
  fill(214, 24, 24);
  ellipse((float)ball.x, (float)ball.y, ball.radius, ball.radius);
    
}

void mousePressed(){
  ball.initialPos();
}
void mouseReleased(){
  ball.applyInitialForce();
}

class Ball{
  int radius;
  int mass;
  
  double x;
  double y;
  
  double xVelocity;
  double yVelocity;
  
  double xAccel;
  double yAccel;
  
  int xMouseInitial,yMouseInitial;
  int initialTime;
  
  boolean pressedBefore;
  
  double xInitialForce;
  double yInitialForce;
  double gravityForce;//TODO apply gravity
  
  double netYForce;
  double netXForce;
  
  Ball(int x, int y,int r, int m){
    this.x=x;
    this.y=y;
    radius = r;
    mass=m;
    xVelocity=0;
    yVelocity=0;
    xAccel=0;
    yAccel=0;
    pressedBefore=false;
    gravityForce=mass*9.8;
  }
  
  void initialPos(){
    if(!pressedBefore){
      initialTime = frameCount;
      xMouseInitial=mouseX;
      yMouseInitial=mouseY;
      pressedBefore = true;  //TODO fix resling
    }
  }
  
  void applyInitialForce(){
    double xChange = mouseX-xMouseInitial;
    double yChange = mouseY-yMouseInitial;
    int timeChange=frameCount-initialTime;
    xVelocity=xChange/timeChange;
    yVelocity=yChange/timeChange;
    
    xAccel=xVelocity/timeChange;
    yAccel=yVelocity/timeChange;
    System.out.println(xAccel+" "+yAccel);
    
    xInitialForce=xAccel*mass;
    yInitialForce=yAccel*mass;
    System.out.println(xInitialForce+" "+yInitialForce);
    pressedBefore=false;
  }
  
  void changePos(){
    x+=calculateVelocity(netXForce,xVelocity);
    y+=calculateVelocity(netYForce,yVelocity);
    
    if(x > width-radius/2 || x < radius/2){
      xVelocity *= -1;
    }
    if(y > height-radius/2 || y < radius/2){ //TODO fix out of bound bug with fast velocities
      yVelocity *= -1;
    }
  }
  double calculateVelocity(double f,double v){
    double accel = f/mass;
    return v+accel;
  }
}
