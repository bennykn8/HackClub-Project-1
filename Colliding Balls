PhysBall[] a = new PhysBall[20];
Line[] lines = new Line[0];
void setup() 
{
  size(500, 500);
  for (int i = 0; i < a.length; i++) {
    //a[i]= new PhysBall(new Coord((float)Math.random()*500, (float)Math.random()*10-5, 0), new Coord((float)Math.random()*500, (float)Math.random()*10-5, 0.1), (float)Math.random()*25+(float)Math.random()*25+10);
    a[i] = new PhysBall(TwoVector.randomTwoVector(0, 500), TwoVector.randomTwoVector(-5, 5), new TwoVector(0, 0), (float)Math.random()*5+(float)Math.random()*5+5);
    //a[i]= new PhysBall(new Coord((float)Math.random()*500, (float)Math.random()*10-5, 0.0), new Coord((float)Math.random()*500, (float)Math.random()*10-5, 0.1), 30);
  }
  //borders
  //lines[0] = new Line(0, 0, 500, 0, 0);
  //lines[1] = new Line(0, 500, 500, 500, 0);
  //lines[2] = new Line(0, 0, 0, 500, 0);
  //lines[3] = new Line(500, 0, 500, 500, 0);
  //additional lines
  //lines[4] = new Line(500, 500, 0, 0, 0);
  //lines[5] = new Line(0, 500, 500, 0, 0);
}

void draw() { 
  background(204);
  for (int i = 0; i < a.length; i++) {
    a[i].update();
  }
  for (PhysBall test : a) {
    for (Line line : lines) {
      test.checkWallCollisions(line);
    }
  }
  for (int i = 0; i < a.length; i++) { //Collision w/ other balls checks for all balls
    for (int j = i+1; j < a.length; j++) {//Updates both balls; only does each pair of balls once.
      PhysBall.checkBallCollisions(a[i], a[j]);
    }
  }
  for (Line line : lines) {
    line(line.getStartx()-line.getWidth()*(float)Math.sin(line.getAngle()), line.getStarty()+line.getWidth()*(float)Math.cos(line.getAngle()), line.getEndx()-line.getWidth()*(float)Math.sin(line.getAngle()), line.getEndy()+line.getWidth()*(float)Math.cos(line.getAngle()));
    line(line.getStartx()+line.getWidth()*(float)Math.sin(line.getAngle()), line.getStarty()-line.getWidth()*(float)Math.cos(line.getAngle()), line.getEndx()+line.getWidth()*(float)Math.sin(line.getAngle()), line.getEndy()-line.getWidth()*(float)Math.cos(line.getAngle()));
  }
  for (int i = 0; i < a.length; i++) {
    ellipse(a[i].getPos().one(), a[i].getPos().two(), a[i].getSize()*2, a[i].getSize()*2);
  }
} 

static class PhysBall {
  private float size;
  private TwoVector pos;
  private TwoVector spd;
  private TwoVector accel;
  public PhysBall(TwoVector p, TwoVector s, TwoVector a, float si) {
    pos = p;
    spd = s;
    accel = a;
    size = si;
  }
  public void update() {
    accel = pos.getField();
    spd = TwoVector.add(spd, accel);
    move(TwoVector.add(spd, TwoVector.scalarMultiple(-1/2, accel)));
  }
  public TwoVector getPos() {
    return pos;
  }
  public void move(TwoVector a) {
    pos = TwoVector.add(pos, a);
  }
  public TwoVector getSpd() {
    return spd;
  }
  public TwoVector getAccel() {
    return accel;
  }
  public float getSize() {
    return size;
  }
  public void setSpd(TwoVector a) {
    spd = a;
  }
  public void checkWallCollisions(Line line) {
    TwoVector wall = new TwoVector(line.getEndx()-line.getStartx(), line.getEndy()-line.getStarty());
    TwoVector position = new TwoVector(pos.one()-line.getStartx(), pos.two()-line.getStarty());
    TwoVector distance = TwoVector.add(position, TwoVector.scalarMultiple(-1*TwoVector.dot(wall, position) / wall.magnitude() / wall.magnitude(), wall));
    if (distance.magnitude()<(line.getWidth()+size)) {
      TwoVector parallel = TwoVector.scalarMultiple(TwoVector.dot(wall, spd) / wall.magnitude() / wall.magnitude(), wall);
      TwoVector perpendicular = TwoVector.scalarMultiple(0.7, TwoVector.add(spd, TwoVector.scalarMultiple(-1, parallel)));
      if (perpendicular.magnitude()<0.9&&TwoVector.dot(distance, accel)<0) perpendicular = new TwoVector(0, 0); //add friction here
      setSpd(TwoVector.add(parallel, TwoVector.scalarMultiple(-1, perpendicular)));

      move(TwoVector.add(TwoVector.scalarMultiple((size+line.getWidth())/distance.magnitude(), distance), TwoVector.scalarMultiple(-1, distance)));
    }
  }
  public static void checkBallCollisions(PhysBall a, PhysBall b) {
    TwoVector distance = TwoVector.add(b.getPos(), TwoVector.scalarMultiple(-1, a.getPos()));
    if (distance.magnitude()<b.getSize()+a.getSize()) {
      TwoVector inForceDirectionI = TwoVector.scalarMultiple(TwoVector.dot(distance, a.getSpd()) / distance.magnitude() / distance.magnitude()*0.85, distance);
      TwoVector perpendicularI = TwoVector.add(a.getSpd(), TwoVector.scalarMultiple(-1, inForceDirectionI));
      TwoVector inForceDirectionJ = TwoVector.scalarMultiple(TwoVector.dot(distance, b.getSpd()) / distance.magnitude() / distance.magnitude()*0.85, distance);
      TwoVector perpendicularJ = TwoVector.add(b.getSpd(), TwoVector.scalarMultiple(-1, inForceDirectionJ));
      if (inForceDirectionJ.magnitude()<0.9) inForceDirectionJ = new TwoVector(0, 0); //friction
      if (inForceDirectionI.magnitude()<0.9) inForceDirectionI = new TwoVector(0, 0); //friction
      a.setSpd(TwoVector.add(inForceDirectionJ, perpendicularI));
      b.setSpd(TwoVector.add(inForceDirectionI, perpendicularJ));

      //Making sure the balls are not intersecting at the end; snaps the balls out.
      a.move(TwoVector.scalarMultiple((distance.magnitude() - a.getSize() - b.getSize()) / 2 / distance.magnitude(), distance));
      b.move(TwoVector.scalarMultiple((b.getSize() + a.getSize() - distance.magnitude()) / 2 / distance.magnitude(), distance));
    }
  }
}

static class TwoVector {
  float one, two;
  public TwoVector(float o, float t) {
    one = o;
    two = t;
  }
  public static TwoVector randomTwoVector(float low, float high) {
    return new TwoVector((float)Math.random()*(high-low)+low, (float)Math.random()*(high-low)+low);
  }
  public float one() {
    return one;
  }
  public float two() {
    return two;
  }
  public float magnitude() {
    return (float)Math.sqrt(Math.pow(one, 2)+Math.pow(two, 2));
  }
  public static TwoVector add(TwoVector a, TwoVector b) {
    return new TwoVector(a.one + b.one, a.two + b.two);
  }
  public static float dot(TwoVector a, TwoVector b) {
    return a.one*b.one+a.two*b.two;
  }
  public static TwoVector scalarMultiple(float s, TwoVector a) {
    return new TwoVector(s*a.one(), s*a.two());
  }
  public TwoVector getField() {
    TwoVector point = new TwoVector(250, 250);
    TwoVector toward = TwoVector.scalarMultiple(0.00001*TwoVector.add(this, TwoVector.scalarMultiple(-1, point)).magnitude(), TwoVector.add(point, TwoVector.scalarMultiple(-1, this)));
    //TwoVector away = TwoVector.scalarMultiple(0.00001*TwoVector.add(this, TwoVector.scalarMultiple(-1, point)).magnitude(), TwoVector.add(this, TwoVector.scalarMultiple(-1, point)));
    return toward;
    //return new TwoVector(away.two(), -.0001*away.one());
    //TwoVector.scalarMultiple(0.00001*TwoVector.add(this, TwoVector.scalarMultiple(-1, point)).magnitude(), TwoVector.add(point, TwoVector.scalarMultiple(-1, this)));
  }
}

static class Line {
  float startx, starty, endx, endy, wit;
  public Line(float a, float b, float c, float d, float e) {
    startx = a;
    starty = b;
    endx = c;
    endy = d;
    wit = e;
  }
  public float getStartx() {
    return startx;
  }
  public float getStarty() {
    return starty;
  }
  public float getEndx() {
    return endx;
  }
  public float getEndy() {
    return endy;
  }
  public float getWidth() {
    return wit;
  }
  public float getAngle() {
    return (float)Math.tan((endy-starty)/(endx-startx));
  }
}
